/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import { ENGINE } from '../engine';
import { RaggedRange } from '../kernel_names';
import { convertToTensor } from '../tensor_util_env';
import { op } from './operation';
/**
 * Returns a RaggedTensor result composed from rtDenseValues and rtNestedSplits,
 * such that result[i] = [starts[i], starts[i] + deltas[i], ..., limits[i]]).
 *
 * @param starts: A Tensor. Must be one of the following types:
 *     'float32', 'int32'. The starts of each range.
 * @param limits: A Tensor. Must have the same type as starts. The limits of
 *     each range.
 * @param deltas: A Tensor. Must have the same type as starts. The deltas of
 *     each range.
 * @return A map with the following properties:
 *     - rtNestedSplits: A Tensor of type 'int32'.
 *     - rtDenseValues: A Tensor. Has the same type as starts.
 */
function raggedRange_(starts, limits, deltas) {
    const $starts = convertToTensor(starts, 'starts', 'raggedRange');
    const $limits = convertToTensor(limits, 'limits', 'raggedRange', $starts.dtype);
    const $deltas = convertToTensor(deltas, 'deltas', 'raggedRange', $starts.dtype);
    const inputs = {
        starts: $starts,
        limits: $limits,
        deltas: $deltas,
    };
    const result = ENGINE.runKernel(RaggedRange, inputs);
    return {
        rtNestedSplits: result[0],
        rtDenseValues: result[1],
    };
}
export const raggedRange = op({ raggedRange_ });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFnZ2VkX3JhbmdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9vcHMvcmFnZ2VkX3JhbmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFDLFdBQVcsRUFBb0IsTUFBTSxpQkFBaUIsQ0FBQztBQUcvRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFbkQsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUUvQjs7Ozs7Ozs7Ozs7OztHQWFHO0FBRUgsU0FBUyxZQUFZLENBQ2pCLE1BQXlCLEVBQUUsTUFBeUIsRUFDcEQsTUFBeUI7SUFDM0IsTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDakUsTUFBTSxPQUFPLEdBQ1QsZUFBZSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwRSxNQUFNLE9BQU8sR0FDVCxlQUFlLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXBFLE1BQU0sTUFBTSxHQUFzQjtRQUNoQyxNQUFNLEVBQUUsT0FBTztRQUNmLE1BQU0sRUFBRSxPQUFPO1FBQ2YsTUFBTSxFQUFFLE9BQU87S0FDaEIsQ0FBQztJQUVGLE1BQU0sTUFBTSxHQUFhLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLE1BQVksQ0FBQyxDQUFDO0lBQ3JFLE9BQU87UUFDTCxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN6QixhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUN6QixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsRUFBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQy5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge0VOR0lORX0gZnJvbSAnLi4vZW5naW5lJztcbmltcG9ydCB7UmFnZ2VkUmFuZ2UsIFJhZ2dlZFJhbmdlSW5wdXRzfSBmcm9tICcuLi9rZXJuZWxfbmFtZXMnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge05hbWVkVGVuc29yTWFwfSBmcm9tICcuLi90ZW5zb3JfdHlwZXMnO1xuaW1wb3J0IHtjb252ZXJ0VG9UZW5zb3J9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQge1RlbnNvckxpa2V9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7b3B9IGZyb20gJy4vb3BlcmF0aW9uJztcblxuLyoqXG4gKiBSZXR1cm5zIGEgUmFnZ2VkVGVuc29yIHJlc3VsdCBjb21wb3NlZCBmcm9tIHJ0RGVuc2VWYWx1ZXMgYW5kIHJ0TmVzdGVkU3BsaXRzLFxuICogc3VjaCB0aGF0IHJlc3VsdFtpXSA9IFtzdGFydHNbaV0sIHN0YXJ0c1tpXSArIGRlbHRhc1tpXSwgLi4uLCBsaW1pdHNbaV1dKS5cbiAqXG4gKiBAcGFyYW0gc3RhcnRzOiBBIFRlbnNvci4gTXVzdCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB0eXBlczpcbiAqICAgICAnZmxvYXQzMicsICdpbnQzMicuIFRoZSBzdGFydHMgb2YgZWFjaCByYW5nZS5cbiAqIEBwYXJhbSBsaW1pdHM6IEEgVGVuc29yLiBNdXN0IGhhdmUgdGhlIHNhbWUgdHlwZSBhcyBzdGFydHMuIFRoZSBsaW1pdHMgb2ZcbiAqICAgICBlYWNoIHJhbmdlLlxuICogQHBhcmFtIGRlbHRhczogQSBUZW5zb3IuIE11c3QgaGF2ZSB0aGUgc2FtZSB0eXBlIGFzIHN0YXJ0cy4gVGhlIGRlbHRhcyBvZlxuICogICAgIGVhY2ggcmFuZ2UuXG4gKiBAcmV0dXJuIEEgbWFwIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogICAgIC0gcnROZXN0ZWRTcGxpdHM6IEEgVGVuc29yIG9mIHR5cGUgJ2ludDMyJy5cbiAqICAgICAtIHJ0RGVuc2VWYWx1ZXM6IEEgVGVuc29yLiBIYXMgdGhlIHNhbWUgdHlwZSBhcyBzdGFydHMuXG4gKi9cblxuZnVuY3Rpb24gcmFnZ2VkUmFuZ2VfKFxuICAgIHN0YXJ0czogVGVuc29yfFRlbnNvckxpa2UsIGxpbWl0czogVGVuc29yfFRlbnNvckxpa2UsXG4gICAgZGVsdGFzOiBUZW5zb3J8VGVuc29yTGlrZSk6IE5hbWVkVGVuc29yTWFwIHtcbiAgY29uc3QgJHN0YXJ0cyA9IGNvbnZlcnRUb1RlbnNvcihzdGFydHMsICdzdGFydHMnLCAncmFnZ2VkUmFuZ2UnKTtcbiAgY29uc3QgJGxpbWl0cyA9XG4gICAgICBjb252ZXJ0VG9UZW5zb3IobGltaXRzLCAnbGltaXRzJywgJ3JhZ2dlZFJhbmdlJywgJHN0YXJ0cy5kdHlwZSk7XG4gIGNvbnN0ICRkZWx0YXMgPVxuICAgICAgY29udmVydFRvVGVuc29yKGRlbHRhcywgJ2RlbHRhcycsICdyYWdnZWRSYW5nZScsICRzdGFydHMuZHR5cGUpO1xuXG4gIGNvbnN0IGlucHV0czogUmFnZ2VkUmFuZ2VJbnB1dHMgPSB7XG4gICAgc3RhcnRzOiAkc3RhcnRzLFxuICAgIGxpbWl0czogJGxpbWl0cyxcbiAgICBkZWx0YXM6ICRkZWx0YXMsXG4gIH07XG5cbiAgY29uc3QgcmVzdWx0OiBUZW5zb3JbXSA9IEVOR0lORS5ydW5LZXJuZWwoUmFnZ2VkUmFuZ2UsIGlucHV0cyBhcyB7fSk7XG4gIHJldHVybiB7XG4gICAgcnROZXN0ZWRTcGxpdHM6IHJlc3VsdFswXSxcbiAgICBydERlbnNlVmFsdWVzOiByZXN1bHRbMV0sXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCByYWdnZWRSYW5nZSA9IG9wKHtyYWdnZWRSYW5nZV99KTtcbiJdfQ==