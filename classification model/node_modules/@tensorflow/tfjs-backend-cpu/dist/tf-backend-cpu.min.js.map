{"version":3,"file":"tf-backend-cpu.min.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../tfjs-backend-cpu/src/cpu_util.ts","../../../../tfjs-backend-cpu/src/backend_cpu.ts","../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Complex.ts","../../../../tfjs-backend-cpu/src/utils/zeros_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Identity.ts","../../../../tfjs-backend-cpu/src/kernels/Real.ts","../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../tfjs-backend-cpu/src/utils/binary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose.ts","../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedRange_impl.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-cpu/src/base.ts","../../../../tfjs-backend-cpu/src/kernels/Elu.ts","../../../../tfjs-backend-cpu/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-cpu/src/kernels/Prelu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu6.ts","../../../../tfjs-backend-cpu/src/utils/fused_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Reshape.ts","../../../../tfjs-backend-cpu/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/Acos.ts","../../../../tfjs-backend-cpu/src/kernels/Acosh.ts","../../../../tfjs-backend-cpu/src/kernels/AddN.ts","../../../../tfjs-backend-cpu/src/kernels/All.ts","../../../../tfjs-backend-cpu/src/kernels/Any.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMax.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMin.ts","../../../../tfjs-backend-cpu/src/kernels/Asin.ts","../../../../tfjs-backend-cpu/src/kernels/Asinh.ts","../../../../tfjs-backend-cpu/src/kernels/Atan.ts","../../../../tfjs-backend-cpu/src/kernels/Atan2.ts","../../../../tfjs-backend-cpu/src/kernels/Atanh.ts","../../../../tfjs-backend-cpu/src/utils/pool_utils.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/BatchNorm.ts","../../../../tfjs-backend-cpu/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount.ts","../../../../tfjs-backend-cpu/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-cpu/src/kernels/ClipByValue.ts","../../../../tfjs-backend-cpu/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-cpu/src/kernels/Imag.ts","../../../../tfjs-backend-cpu/src/kernels/Concat.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-cpu/src/kernels/Cos.ts","../../../../tfjs-backend-cpu/src/kernels/Cosh.ts","../../../../tfjs-backend-cpu/src/kernels/CropAndResize.ts","../../../../tfjs-backend-cpu/src/kernels/Cumprod.ts","../../../../tfjs-backend-cpu/src/kernels/Cumsum.ts","../../../../tfjs-backend-cpu/src/kernels/DenseBincount.ts","../../../../tfjs-backend-cpu/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Diag.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2D.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Sum.ts","../../../../tfjs-backend-cpu/src/kernels/Einsum.ts","../../../../tfjs-backend-cpu/src/kernels/EluGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Erf.ts","../../../../tfjs-backend-cpu/src/kernels/ExpandDims.ts","../../../../tfjs-backend-cpu/src/kernels/RealDiv.ts","../../../../tfjs-backend-cpu/src/utils/fft_utils.ts","../../../../tfjs-backend-cpu/src/kernels/FFT.ts","../../../../tfjs-backend-cpu/src/kernels/Fill.ts","../../../../tfjs-backend-cpu/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts","../../../../tfjs-backend-cpu/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2.ts","../../../../tfjs-backend-cpu/src/kernels/IFFT.ts","../../../../tfjs-backend-cpu/src/kernels/IsFinite.ts","../../../../tfjs-backend-cpu/src/kernels/IsInf.ts","../../../../tfjs-backend-cpu/src/kernels/IsNaN.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace.ts","../../../../tfjs-backend-cpu/src/kernels/Log1p.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalNot.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalOr.ts","../../../../tfjs-backend-cpu/src/kernels/LRN.ts","../../../../tfjs-backend-cpu/src/kernels/LRNGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Max.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Mean.ts","../../../../tfjs-backend-cpu/src/kernels/Min.ts","../../../../tfjs-backend-cpu/src/kernels/MirrorPad.ts","../../../../tfjs-backend-cpu/src/kernels/Mod.ts","../../../../tfjs-backend-cpu/src/kernels/Softmax.ts","../../../../tfjs-backend-cpu/src/kernels/Multinomial.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-cpu/src/kernels/OneHot.ts","../../../../tfjs-backend-cpu/src/kernels/ZerosLike.ts","../../../../tfjs-backend-cpu/src/kernels/OnesLike.ts","../../../../tfjs-backend-cpu/src/kernels/Pack.ts","../../../../tfjs-backend-cpu/src/kernels/PadV2.ts","../../../../tfjs-backend-cpu/src/kernels/Pow.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedGather.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedRange.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor.ts","../../../../tfjs-backend-cpu/src/kernels/Range.ts","../../../../tfjs-backend-cpu/src/kernels/Reciprocal.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Reverse.ts","../../../../tfjs-backend-cpu/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-cpu/src/kernels/Round.ts","../../../../tfjs-backend-cpu/src/kernels/ScatterNd.ts","../../../../tfjs-backend-cpu/src/kernels/SearchSorted_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SearchSorted.ts","../../../../tfjs-backend-cpu/src/kernels/Select.ts","../../../../tfjs-backend-cpu/src/kernels/Selu.ts","../../../../tfjs-backend-cpu/src/kernels/Sign.ts","../../../../tfjs-backend-cpu/src/kernels/Sin.ts","../../../../tfjs-backend-cpu/src/kernels/Sinh.ts","../../../../tfjs-backend-cpu/src/kernels/Softplus.ts","../../../../tfjs-backend-cpu/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-cpu/src/kernels/SparseToDense.ts","../../../../tfjs-backend-cpu/src/kernels/SplitV.ts","../../../../tfjs-backend-cpu/src/kernels/Square.ts","../../../../tfjs-backend-cpu/src/kernels/Step.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-cpu/src/kernels/Tan.ts","../../../../tfjs-backend-cpu/src/kernels/Tanh.ts","../../../../tfjs-backend-cpu/src/kernels/Tile.ts","../../../../tfjs-backend-cpu/src/kernels/TopK.ts","../../../../tfjs-backend-cpu/src/kernels/Transform.ts","../../../../tfjs-backend-cpu/src/kernels/Unique.ts","../../../../tfjs-backend-cpu/src/kernels/Unpack.ts","../../../../tfjs-backend-cpu/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-cpu/src/register_all_kernels.ts","../../../../tfjs-backend-cpu/src/version.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi, looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, visit https://github.com/tensorflow/tfjs-node for more details. ' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst INT32_MAX = 2147483647;\n\nexport function raggedRangeImpl(\n    starts: TypedArray, startsShape: number[], startsDType: DataType,\n    limits: TypedArray, limitsShape: number[], deltas: TypedArray,\n    deltasShape: number[]): [TypedArray, TypedArray] {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes: number[] = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits =\n      util.getArrayFromDType('int32', nRows + 1) as TypedArray;\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size: number;  // The number of elements in the specified range.\n    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n\n  const nVals = rtNestedSplits[nRows];\n\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues =\n      util.getArrayFromDType(startsDType, nVals) as TypedArray;\n\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n\n  return [rtNestedSplits, rtDenseValues];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');\n\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, broadcast_util, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue as number, bValue as number));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendCPU,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.data.get(s0.dataId).values as TypedArray;\n  const s1Vals = backend.data.get(s1.dataId).values as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'cpu',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clipByValue = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clipByValue,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumprod(\n    args: {inputs: CumprodInputs, backend: MathBackendCPU,\n           attrs: CumprodAttrs}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumprod');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumprod in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeOnesTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 1 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] * vals[prevIdx] :\n                                aVals[idx] * vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'cpu',\n  kernelFunc: cumprod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coordX = Math.round(imageWidth - col - 1);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    // For NCHW format, if bias is a 1-D tensor, it is supposed to be aligned\n    // to the channel of the conv2d's result; if the bias is a scalar, the\n    // bias_add is computed as if the bias was broadcasted to the shape of the\n    // conv2d's result.\n    if (dataFormat === 'NCHW' && bias.shape.length === 1 &&\n        bias.shape[0] !== 1) {\n      const reshapedBias = reshape(\n          {inputs: {x: bias}, backend, attrs: {shape: [bias.shape[0], 1, 1]}});\n      result =\n          add({inputs: {a: result, b: reshapedBias}, backend}) as TensorInfo;\n      backend.disposeIntermediateTensorInfo(reshapedBias);\n    } else {\n      // This condition handles NHWC and NCHW (scalar case). The only other case\n      // for NCHW (1D case) is handled above.\n      result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    // For NCHW format, if PReLu activation weights is a 1-D tensor, it is\n    // supposed to be aligned with the channel of the conv2d's result. For other\n    // cases, whether NCHW or NHWC data format, the conv2d result is\n    // already aligned with the activation weights.\n    if (dataFormat === 'NCHW' && activation === 'prelu' &&\n        preluActivationWeights.shape.length === 1 &&\n        preluActivationWeights.shape[0] !== 1) {\n      const reshapedAlpha = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: [preluActivationWeights.shape[0], 1, 1]}\n      });\n      result = applyActivation(\n          backend, result, activation, reshapedAlpha, leakyreluAlpha);\n      backend.disposeIntermediateTensorInfo(reshapedAlpha);\n    } else {\n      result = applyActivation(\n          backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  // Throw error when any index is out of bound.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.data.get(indices.dataId).values as TypedArray;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n            `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], dtype, res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedGatherImpl} from './RaggedGather_impl';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits = paramsNestedSplits.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.data.get(paramsDenseValues.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImpl(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedRange, RaggedRangeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedRangeImpl} from './RaggedRange_impl';\n\nexport function raggedRange(\n    args: {inputs: RaggedRangeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {starts, limits, deltas} = inputs;\n\n  const $starts = backend.data.get(starts.dataId).values as TypedArray;\n  const $limits = backend.data.get(limits.dataId).values as TypedArray;\n  const $deltas = backend.data.get(deltas.dataId).values as TypedArray;\n\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImpl(\n      $starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas,\n      deltas.shape);\n\n  const rtNestedSplits = backend.makeTensorInfo(\n      [rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo(\n      [rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n\n  return [rtNestedSplits, rtDenseValues];\n}\n\nexport const raggedRangeConfig: KernelConfig = {\n  kernelName: RaggedRange,\n  backendName: 'cpu',\n  kernelFunc: raggedRange as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedTensorToTensorImpl} from './RaggedTensorToTensor_impl';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.data.get(shape.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values as TypedArray;\n  const $rowPartitionValues = rowPartitionTensors.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImpl(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'cpu',\n  kernelFunc: raggedTensorToTensor as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(indices);\n  const updatesBuf = backend.bufferSync<Rank, 'int32'|'float32'>(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction lowerBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] < value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nfunction upperBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] <= value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nexport function searchSortedImpl(\n    sortedInputs: TypedArray, values: TypedArray, batchSize: number,\n    numInputs: number, numValues: number, side: 'left'|'right'): TypedArray {\n  const output =\n      util.getArrayFromDType('int32', batchSize * numValues) as TypedArray;\n  for (let b = 0; b < batchSize; ++b) {\n    const sortedInputsSlice =\n        sortedInputs.slice(b * numInputs, (b + 1) * numInputs);\n    const outputOffset = b * numValues;\n    for (let i = 0; i < numValues; ++i) {\n      output[outputOffset + i] = side === 'left' ?\n          lowerBound(sortedInputsSlice, values[i + outputOffset]) :\n          upperBound(sortedInputsSlice, values[i + outputOffset]);\n    }\n  }\n  return output;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {searchSortedImpl} from './SearchSorted_impl';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendCPU,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const $sortedSequence =\n      backend.data.get(sortedSequence.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n\n  const output = searchSortedImpl(\n      $sortedSequence, $values, sortedSequence.shape[0],\n      sortedSequence.shape[1], values.shape[1], side);\n  return backend.makeTensorInfo(values.shape, 'int32', output);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'cpu',\n  kernelFunc: searchSorted as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n\n  let outBuf;\n  switch (sparseValues.dtype) {\n    case 'bool': {\n      const updatesBuf = backend.bufferSync<Rank, 'bool'>(sparseValues);\n      const $defaultValue =\n          Boolean(backend.data.get(defaultValue.dataId).values[0]);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'float32': {\n      const updatesBuf = backend.bufferSync<Rank, 'float32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'int32': {\n      const updatesBuf = backend.bufferSync<Rank, 'int32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'string': {\n      const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n      const $defaultValue = util.decodeString(\n          backend.data.get(defaultValue.dataId).values[0] as Uint8Array);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    default:\n      throw new Error(`Unsupported type ${sparseValues.dtype}`);\n  }\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringSplitImpl} from './StringSplit_impl';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendCPU,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n  const $delimiter = backend.data.get(delimiter.dataId).values[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const inStrides = util.computeStrides(image.shape);\n  const batchInStride = inStrides[0];\n  const rowInStride = inStrides[1];\n  const colInStride = inStrides[2];\n\n  const outStrides = util.computeStrides(outShape);\n  const batchOutStride = outStrides[0];\n  const rowOutStride = outStrides[1];\n  const colOutStride = outStrides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchInStride,\n                  rowInStride, colInStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchInStride,\n                  rowInStride, colInStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchOutStride + outY * rowOutStride +\n              outX * colOutStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {dilation2DBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2DBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {raggedGatherConfig} from './kernels/RaggedGather';\nimport {raggedRangeConfig} from './kernels/RaggedRange';\nimport {raggedTensorToTensorConfig} from './kernels/RaggedTensorToTensor';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  dilation2DBackpropFilterConfig,\n  dilation2DBackpropInputConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  raggedGatherConfig,\n  raggedRangeConfig,\n  raggedTensorToTensorConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '4.0.0';\nexport {version};\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","pop","length","push","__values","o","s","m","i","__read","r","ar","error","__spreadArray","to","from","pack","arguments","l","slice","concat","assertNotComplex","tensor","opName","isArray","forEach","util","assert","dtype","whereImpl","kernel_impls","_super","_this","data","DataStorage","engine","String","__","constructor","create","__extends","MathBackendCPU","nextDataId","values","shape","firstUse","env","get","backend_util","warn","dataId","id","set","refCount","outId","isString","encodedValues","map","encodeString","write","has","numDataIds","readSync","_b","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","strings","decodeString","buffer","Error","makeTensorFromTensorInfo","makeTensorInfo","force","disposeData","delete","tensorInfo","start","now","kernelMs","unreliable","reasons","condition","condVals","epsilon","KernelBackend","simpleAbsImpl","vals","resultValues","Float32Array","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","inputs","cpuBackend","backend","sizeFromShape","makeOutput","createSimpleBinaryKernelImpl","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","complex","realVals","imagVals","complexInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","incRef","identityConfig","Identity","input","realVal","realConfig","Real","castImpl","inputType","Int32Array","zero","toTypedArray","_a","a","resultData","cast","attrs","zerosTensorInfo","floatX","disposeIntermediateTensorInfo","realPart","hasEncodingLoss","resultShape","resultType","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","_c","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","add","Add","addConfig","bincountImpl","xVals","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","Ceil","ceilConfig","concatImpl","outShape","simplyConcat","offset_1","colOffset_1","decodedData","tIdx","row","resIdx","col","equalImpl","equal","Equal","equalConfig","expImpl","exp","Exp","expConfig","expm1Impl","expm1","Expm1","expm1Config","floorImpl","floor","Floor","floorConfig","gatherNdImpl","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","strides","paramsShape","paramsSize","index","flattenIndex","dim","k","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greater","Greater","greaterConfig","greaterEqualImpl","greaterEqual","GreaterEqual","greaterEqualConfig","lessImpl","less","Less","lessConfig","lessEqualImpl","lessEqual","LessEqual","lessEqualConfig","linSpaceImpl","stop","num","logImpl","log","Log","logConfig","maxImpl","reduceSize","offset","max","Number","isNaN","maximumImpl","aValue","bValue","maximum","Maximum","maximumConfig","minimumImpl","min","minimum","Minimum","minimumConfig","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqual","NotEqual","notEqualConfig","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","i_1","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","computeOutAndReduceShapes","reduceShape","outDtype","upcastType","prod_1","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","getInnerMostAxes","expandShapeToKeepDim","makeSplits","indices","indicesShape","paramsNestedSplits","numParamsDenseValues","valueSlices","numValues","numSplits","outSplits","fill","splits","lastSplit","validateSplits","nrows","rowLength","limit","outDim","outSplitsOutDim","delta","computeFlatOuterDims","orig","numOutDims","outDims","inDim","getValues","paramsDenseValues","paramsDenseValuesShape","paramsDenseValuesDType","valuesShape","valuesOut","numElements","valueSize","denseM","valuesM","outPos","valueSlices_1","writeValueSlices","raggedGatherImpl","paramsNestedSplitsShapes","outputRaggedRank","numParams","locString","join","validateIndices","outputNestedSplits","splitsOut","getSplits","outputDenseValues","INT32_MAX","raggedRangeImpl","starts","startsShape","startsDType","limits","limitsShape","deltas","deltasShape","broadcastStarts","broadcastLimits","broadcastDeltas","inSizes","nRows","rtNestedSplits","nVals","rtDenseValues","valueIndex","rowSize","RowPartitionType","shapeShape","valuesDType","defaultValue","defaultValueShape","rowPartitionValues","rowPartitionValuesShapes","rowPartitionTypeStrings","rowPartitionTypes","getRowPartitionTypesHelper","raggedRank","getRaggedRank","RaggedTensorToTensorOp","dimension","FIRST_DIM_SIZE","rowPartitionTensor","getRowPartitionTensor","getRowPartitionTypeByDimension","VALUE_ROWIDS","getMaxWidthValueRowID","ROW_SPLITS","getMaxWidthRowSplit","rowSplit","tensorLength","maxWidth","currentWidth","valueRowIds","indexLength","firstEqualIndex","firstEqualIndexValue","tShape","isPartial","makeShape","firstDim","valueShape","validateDefaultValueShape","tensorShapeFromTensor","combineRaggedTensorToTensorShapes","getMaxWidth","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","parentOutputIndex","outputSize","rowSplitSize","realLength","parentOutputIndexCurrent","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","partitionType","calculateOutputIndexValueRowID","calculateOutputIndexRowSplit","firstPartitionTensor","firstPartitionType","getFirstDimensionSize","calculateOutputSize","multiplier","outputShape","outputTensor","outputIndex","calculateFirstParentOutputIndex","calculateOutputIndex","setOutput","valuesBase","outputBase","elementShape","valueElementSize","outputIndexSize","srcShape_1","tidy","defaultValueTensor","reshape","bCastDefault","broadcastTo","dataSync","srcStart","dstStart","dstEnd","srcI","dstI","src","subarray","copyArray","dst","out","shape_1","raggedTensorToTensorImpl","shapesShape","compute","rangeImpl","rsqrtImpl","sqrt","rsqrt","Rsqrt","rsqrtConfig","scatterImpl","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","rank","sigmoidImpl","sigmoid","Sigmoid","sigmoidConfig","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","parseSliceParams","$begin","$size","assertParamsValid","sliceConfig","Slice","sparseFillEmptyRowsImpl","indicesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","outputIndices","outputValues","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","sparseSegmentReductionImpl","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","output","end","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","sqrtImpl","Sqrt","sqrtConfig","squaredDifferenceImpl","diff","squaredDifference","SquaredDifference","squaredDifferenceConfig","stridedSliceImpl","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","StringNGramsOp","nGramWidth","getPadWidth","splitIndex","outputStartIndex","numNGrams","nGramIndex","this_1","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","this_2","getNumNGrams","nGrams","outputStartIdx","this_3","createNGrams","dataLength","stringNGramsImpl","dataSplits","split","delimiters","skipEmpty","tokenStart","indexOf","token","delimiter","stringSplitImpl","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","stringToHashBucketFastImpl","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","subImpl","subComplexImpl","sub","Sub","subConfig","tileImpl","reps","comparePair","valueDiff","select","array","left","right","z","sd","sign","swap","topKImpl","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","uniqueImpl","$axis","uniqueElements","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","undefined","uniqueIndex","keys","outputTmpShape","outputBuffer","uniqueElementIndex","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","applyActivation","activation","preluActivationWeights","leakyreluAlpha","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","current","addRes","activationRes","bias","intermediates","intermediates_1","acos","Acos","acosConfig","acosh","Acosh","acoshConfig","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all_1","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asin","Asin","asinConfig","asinh","Asinh","asinhConfig","atan","Atan","atanConfig","atan2Impl","atan2","Atan2","atan2Config","atanh","Atanh","atanhConfig","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","initialValue","NEGATIVE_INFINITY","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","strides_1","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","bufferSync","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","prod","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","broadcastArgsConfig","BroadcastArgs","s0","s1","s0Vals","s1Vals","broadcastShape","clipByValue","ClipByValue","clipAttrs","clipValueMax","clipValueMin","clipByValueConfig","complexAbsConfig","ComplexAbs","complexVals","real_1","imag_1","hypot","imagVal","imagConfig","Imag","shapes","assertParamsConsistent","computeOutShape","$inputs","filter","reals","imags","realConcated","imagConcated","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cos","Cos","cosConfig","cosh","Cosh","coshConfig","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","cumprodConfig","Cumprod","exclusive","reverse","permutedAxis","resultDtype","makeOnesTypedArray","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","cumsumConfig","Cumsum","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2DConfig","Dilation2D","filterVals","filterRank","computeDilation2DInfo","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2DBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2DBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","sum_1","oldResult","sumConfig","Sum","einsumConfig","Einsum","equation","decodeEinsumEquation","allDims","summedDims","idDims","checkEinsumDimSizes","_d","getEinsumComputePath","path","steps","nSteps","numDimsRemaining","tensorsToDispose","_e","idTerm","_g","getEinsumPermutation","dimsToExpand","isIdentityPermutation","splice","tensorsToDispose_1","eluGradConfig","EluGrad","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","erfConfig","expandDims","$dim","expandDimsConfig","ExpandDims","realDivImpl","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","input_1","fftImpl","getComplexWithIndex","$realInfo","$imagInfo","inputSize","fftRadix2","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","real_2","imag_2","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","colOffset","coordX","outIdx","outputValue","floorDivImpl","floorDiv","FloorDiv","floorDivConfig","fusedConv2DConfig","FusedConv2D","resultOld","reshapedBias","reshapedAlpha","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","params","prepareAndValidate","gatherV2Config","GatherV2","batchDims","parsedAxis","indicesVals","axisDim","$batchDims","indicesSize","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","ifftConfig","IFFT","isFinite","IsFinite","isFiniteConfig","isInf","IsInf","Infinity","isInfConfig","IsNan","isNaNConfig","linSpaceConfig","LinSpace","log1p","Log1p","log1pConfig","logicalAndImpl","logicalAnd","LogicalAnd","logicalAndConfig","logicalNot","LogicalNot","logicalNotConfig","logicalOrImpl","logicalOr","LogicalOr","logicalOrConfig","LRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","pow","LRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","maxPools","maxPoolWithArgmaxImpl","pooled","indexes","pooledDataId","indexesDataId","meanConfig","Mean","toDispose","reduceSizeScalar","minConfig","Min","min_1","mirrorPadConfig","MirrorPad","paddings","mode","coords","inIndex","modImpl","rem","mod","Mod","modConfig","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom","alea","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powImpl","Pow","powConfig","raggedGatherConfig","RaggedGather","$paramsNestedSplits","$paramsNestedSplitsShapes","$paramsDenseValues","$indices","outputDenseValuesShape","outputNestedSplitsTensors","outputDenseValuesTensor","raggedRangeConfig","RaggedRange","$starts","$limits","$deltas","rtNestedSplitsData","rtDenseValuesData","raggedTensorToTensorConfig","RaggedTensorToTensor","rowPartitionTensors","$values","$defaultValue","$rowPartitionValues","rangeConfig","Range","reciprocal","Reciprocal","reciprocalConfig","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","getImageCenter","centerX","centerY","sinFactor","sin","cosFactor","coordY","Round","base","roundConfig","scatterNdConfig","ScatterNd","calculateShapes","lowerBound","mid","upperBound","searchSortedConfig","SearchSorted","sortedSequence","side","sortedInputs","numInputs","sortedInputsSlice","searchSortedImpl","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","selu","Selu","seluConfig","Sign","signConfig","Sin","sinConfig","sinh","Sinh","sinhConfig","threshold","softplus","Softplus","tooLarge","tooSmall","expX","softplusConfig","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$denseShape","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputData","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","Boolean","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","squareConfig","Square","Step","stepAttrs","NaN","stepConfig","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","sliceInfo","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliced","stringNGramsConfig","StringNGrams","stringSplitConfig","StringSplit","stringToHashBucketFastConfig","StringToHashBucketFast","tan","Tan","tanConfig","tanh","Tanh","tanhConfig","tileConfig","Tile","topKConfig","TopK","transformConfig","Transform","transforms","interpolation","fillMode","inStrides","batchInStride","rowInStride","colInStride","outStrides","batchOutStride","rowOutStride","colOutStride","transformVals","transform_1","outY","outX","projection","inX","inY","mapCoord","nearestInterpolation","bilinearInterpolation","outCoord","len","inCoord","sz2","clamp","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","batchStride","rowStride","colStride","yFloor","xFloor","yCeil","xCeil","uniqueConfig","Unique","unpackConfig","Unpack","valueRank","tempRes","unsortedSegmentSumConfig","UnsortedSegmentSum","numSegments","numIters","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfigs","kernelConfigs_1","kernelConfig","registerKernel"],"mappings":"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CAK,GACAE,GACAI,GACAjoC,GACAI,GACA/I,EACA0xC,GACAvZ,GACA2Z,GACAI,GACAE,GACAhtB,GACAjc,GACAI,GACA8oC,GACAvoC,GACA2oC,GACAI,GACAG,GACAI,GACAC,GACAW,GACAU,GACAhqC,GACAkqC,GACAE,GACAE,GACAK,GACAE,GACAQ,GACAI,GACAprC,GACAurC,GACAU,GACAW,GACAvsC,GACAM,GACAitC,GACAU,GACAK,GACA1tC,GACA8tC,GACAU,GACAK,GACAE,GACAM,GACA51B,GACAvY,GACAouC,GACAS,GACAO,GACAM,GACAx8C,EACA2pC,GACAiT,GACAn3B,GACAG,GACAS,GACAw2B,GACA6B,GACA4B,GACAM,GACAe,GACAI,GACAc,GACA9qC,GACA+qC,GACAM,GACAQ,GACAU,GACA5rC,GACA8rC,GACAE,GACAG,GACAlrC,GACA09B,GACA+N,GACAC,GACAQ,GACAI,GACAI,GACAM,GACAE,GACAK,GACAtpC,GACA4pC,GACAvpC,GACA4pC,GACAC,GACAgB,GACAE,GACAE,GACA/mC,GACAwkB,GACA2iB,GACAG,GACAC,GACAE,GACAE,GACAz9C,GACAkgD,GACAE,GACAI,GACA3S,QAGF,IAA2B,IAAAsT,GAAAv2D,EAAAs2D,uCAAe,CAArC,IAAME,YACTC,iBAAeD,4JCxWD"}